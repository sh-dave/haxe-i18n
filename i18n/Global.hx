package i18n;

import haxe.io.Path;
import haxe.Resource;
using Lambda;

/**
* This class provides run-time support for the I18n class, all references to the methods of this class
* are generated by I18n at compile-time. Do NOT invoke these methods directly
* NOR import this class explicitly, otherwise unexpected problems might be caused by the wrong compile-sequence.
**/
class Global {
    static inline var DEFAULT = 'default';
    static var supportedLocales: Array<String> = I18n.getSupportedLocales();
    static var currentLocale: String = DEFAULT;
    static var map: Map<Int, String> = null;
    static var assetsDir: String = I18n.getAssetsDir();
    static var absenceResources = new Map<String, Int>();
    static var listeners = new Map<String, Void -> Void>();

    @:noCompletion
    public static function init() {
        if (supportedLocales.length == 0) {
            throw 'This class is used with the "global" locale only.';
		}

        for (s in I18n.getAbsenceResources()) {
			absenceResources.set(s, 1);
		}

        setCurrentLocale(DEFAULT);
    }

    @:noCompletion
    public static inline function str(id: Int)
        return map.get(id);

    @:noCompletion
    public static inline function res(path: String) : String {
        var locPath = Path.join([currentLocale, path]);

		if (absenceResources.exists(locPath)) {
			locPath = Path.join([DEFAULT, path]);
		}

        return Path.join([assetsDir, locPath]);
    }

    @:noCompletion
    public static inline function addListener(key: String, callb: Void -> Void)
        listeners.set(key, callb);

    @:noCompletion
    public static function setCurrentLocale(locale: String) : String {
		//trace('setCurrentLocale "$locale"');
        if (!supportedLocales.has(locale)) {
			locale = DEFAULT;
		}

		if (currentLocale == locale && map != null) {
			return locale;
		}

        var resName = '__rox_i18n_strings_$locale';
        var s = Resource.getString(resName);

		if (s == null || s.length == 0) {
            throw 'Cannot load Resource $resName.';
		}

        var xml = Xml.parse(s);
        map = new Map();

        for (n in xml.firstElement().elements()) {
            var id = Std.parseInt(n.get('id'));
            var val = n.firstChild().nodeValue;
            map.set(id, val);
        }

        currentLocale = locale;

		for (callb in listeners) {
			callb();
		}

		return currentLocale;
    }

    @:noCompletion
    public static inline function getCurrentLocale()
        return currentLocale;
}
